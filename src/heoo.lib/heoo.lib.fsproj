<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>netstandard2.1;net6.0</TargetFrameworks>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <Title>Half elmish OO</Title>
        <Copyright>ptcsoderlund@gmail.com</Copyright>
        <PackageProjectUrl>https://github.com/ptcsoderlund/half-elmish-oo</PackageProjectUrl>
        <PackageLicenseUrl></PackageLicenseUrl>
        <Company>N/A</Company>
        <AssemblyVersion>1.3.0</AssemblyVersion>
        <FileVersion>1.3.0</FileVersion>
        <PackageVersion>1.3.0</PackageVersion>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Description>F# half elmish async program loop and viewmodels.
Can potentially be used in any GUI (or graphics?) app.
Where the viewmodels is the glue between graphics and logic.</Description>
        <RepositoryUrl>https://github.com/ptcsoderlund/half-elmish-oo</RepositoryUrl>
        <Version>1.2.5</Version>
        <PackageTags>F#;FSharp;Elmish</PackageTags>
        <PackageLicenseFile>LICENSE</PackageLicenseFile>
        <PackageReleaseNotes>- Passing equality checks on viewmodel onto the underlying models.
- Introducing getCommandBaseT in viewmodel. Use this to create ICommands (CommandBase.T) in order to avoid propertychanged spam.
  There is a right way and a wrong way to create commands, my previous example code had the wrong way. Now we can always do it right.</PackageReleaseNotes>
        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
        <Authors>ptcsoderlund</Authors>
    </PropertyGroup>

    <ItemGroup>
        <Compile Include="CommandBase.fs" />
        <Compile Include="ElmishProgramAsync.fs" />
        <Compile Include="ViewModelBase.fs" />
    </ItemGroup>

    <ItemGroup>
      <None Include="..\..\LICENSE">
        <Pack>True</Pack>
        <PackagePath>\</PackagePath>
      </None>
    </ItemGroup>

</Project>
